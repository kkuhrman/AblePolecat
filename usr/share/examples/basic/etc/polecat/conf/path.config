<?php
/**
 * @file      polecat/etc/polecat/conf/path.config
 * @brief     Able Polecat project path configuration settings file.
 *
 * @author    Karl Kuhrman
 * @copyright [BDS II License] (https://github.com/kkuhrman/AblePolecat/blob/master/LICENSE.md)
 */
 
/**
 * Define ABLE_POLECAT_ALIAS only if your project index.php is in a sub-folder of
 * document root. For example, it is common when setting up concurrent local development 
 * environments on a single machine to use aliases; http://localhost/my_project, etc.
 * In such case, define('ABLE_POLECAT_ALIAS', 'my_project') in your configuration file 
 * ./my_project/etc/polecat/conf/path.config.
 */
if (!defined('ABLE_POLECAT_ALIAS')) {
  global $ABLE_POLECAT_ALIAS;
  !isset($ABLE_POLECAT_ALIAS) ? $ABLE_POLECAT_ALIAS = 'polecat' : NULL;
  define('ABLE_POLECAT_ALIAS', $ABLE_POLECAT_ALIAS);
}

/**
 * Root directory of the entire Able Polecat core project.
 */
if (!defined('ABLE_POLECAT_ROOT')) {
  global $ABLE_POLECAT_ROOT;
  !isset($ABLE_POLECAT_ROOT) ? $ABLE_POLECAT_ROOT = dirname(dirname(dirname(__DIR__))) : NULL;
  define('ABLE_POLECAT_ROOT', $ABLE_POLECAT_ROOT);
}

/**
 * Host-specific system-wide configuration files directory.
 * This constant IS used to locate the server configuration file and must define 
 * the full path of the parent of the conf directory if other than ABLE_POLECAT_ROOT/etc/conf.
 */
if (!defined('ABLE_POLECAT_ETC')) {
  global $ABLE_POLECAT_ETC;
  !isset($ABLE_POLECAT_ETC) ? $ABLE_POLECAT_ETC = ABLE_POLECAT_ROOT . DIRECTORY_SEPARATOR . 'etc' : NULL;
  define('ABLE_POLECAT_ETC', $ABLE_POLECAT_ETC);
}

/**
 * Variable files directory.
 * This constant is used to locate files with content expected to continually change 
 * during normal operation of the system, such as logs. It must define the full path 
 * to a directory, for which the web agent has write privilege if other than 
 * ABLE_POLECAT_ROOT/files.
 */
if (!defined('ABLE_POLECAT_VAR')) {
  global $ABLE_POLECAT_VAR;
  !isset($$ABLE_POLECAT_VAR) ? $ABLE_POLECAT_VAR = ABLE_POLECAT_ROOT . DIRECTORY_SEPARATOR . 'var' : NULL;
  define('ABLE_POLECAT_VAR', $ABLE_POLECAT_VAR);
}

/**
 * Secondary directory hierarchy contains third-party modules, custom pages, services, 
 * utilities, etc.
 */
if (!defined('ABLE_POLECAT_USR')) {
  global $ABLE_POLECAT_USR;
  !isset($ABLE_POLECAT_USR) ? $ABLE_POLECAT_USR = ABLE_POLECAT_ROOT  . DIRECTORY_SEPARATOR . 'usr' : NULL;
  define('ABLE_POLECAT_USR', $ABLE_POLECAT_USR);
}

/**
 * This is the root directory containing all the interface implementations and 
 * extension class source files.
 */
if (!defined('ABLE_POLECAT_SRC')) {
  global $ABLE_POLECAT_SRC;
  !isset($ABLE_POLECAT_SRC) ? $ABLE_POLECAT_SRC = ABLE_POLECAT_USR  . DIRECTORY_SEPARATOR . 'src' : NULL;
  define('ABLE_POLECAT_SRC', $ABLE_POLECAT_SRC);
}

/**
 * Location of Able Polecat core class library.
 * Override this definition if you intend to locate the core class library
 * anywhere other than ABLE_POLECAT_ROOT/core.
 *
 * Best practice is to clone Able Polecat (and other class libraries) in
 * ./project/usr/libs/
 */
if (!defined('ABLE_POLECAT_CORE')) {
  global $ABLE_POLECAT_CORE;
  !isset($ABLE_POLECAT_CORE) ? $ABLE_POLECAT_CORE = implode(DIRECTORY_SEPARATOR, array(ABLE_POLECAT_USR, 'libs', 'AblePolecat', 'core')) : NULL;
  define('ABLE_POLECAT_CORE', $ABLE_POLECAT_CORE);
}